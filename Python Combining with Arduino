# =========================================================================
#
#   Real-time Object Detection with Arduino Buzzer Alarm
#
# =========================================================================

import cv2
from ultralytics import YOLO
import serial  # Import the pyserial library
import time

# --- 1. User Settings & Configuration ---

# !!! IMPORTANT: Path to your trained .pt model file
MODEL_PATH = r"C:\Users\wangs\Downloads\best (1).pt"

# !!! IMPORTANT: The class name that is considered "authorized"
# This must exactly match one of the class names in your dataset's .yaml file
AUTHORIZED_CLASS = "your_class_name" 

# !!! IMPORTANT: Serial port settings for your Arduino
# Find your Arduino's port in the Arduino IDE or Windows Device Manager
ARDUINO_PORT = 'COM3' 
# This baud rate must exactly match the `Serial.begin()` value in your Arduino code
BAUD_RATE = 9600


# --- 2. Initialize YOLO Model ---
yolo = YOLO(MODEL_PATH)


# --- 3. Initialize Camera ---
print("Attempting to open camera 1...")
videoCap = cv2.VideoCapture(1)
if not videoCap.isOpened():
    print("Could not open camera 1. Trying camera 0...")
    videoCap = cv2.VideoCapture(0)
    if not videoCap.isOpened():
        raise RuntimeError("Failed to open any camera (tried index 1 and 0).")
print("Camera opened successfully!")


# --- 4. Initialize Serial Communication with Arduino ---
try:
    arduino = serial.Serial(ARDUINO_PORT, BAUD_RATE, timeout=1)
    time.sleep(2) # Wait for the connection to stabilize
    print(f"Successfully connected to Arduino on port {ARDUINO_PORT}")
except Exception as e:
    print(f"Failed to connect to Arduino: {e}")
    print("The program will continue without buzzer alarm functionality.")
    arduino = None


# --- 5. Helper Function & State Variables ---
current_status = None # Tracks the current state to avoid sending duplicate signals

def get_target_id(yolo_results, target_class_name):
    """Gets the class ID for a given class name from the model's results."""
    names = yolo_results.names
    for class_id, class_name in names.items():
        if class_name == target_class_name:
            return class_id
    return None


# --- 6. Main Detection Loop ---
try:
    # Get the ID for the authorized class once at the start for efficiency
    ret, frame = videoCap.read()
    authorized_class_id = None
    if ret:
        # Perform a single prediction to access the model's class names
        initial_results = yolo.predict(frame, verbose=False)
        authorized_class_id = get_target_id(initial_results[0], AUTHORIZED_CLASS)
        if authorized_class_id is None:
            print(f"WARNING: Class '{AUTHORIZED_CLASS}' not found in the model. Alarm functionality will not work.")

    while True:
        ret, frame = videoCap.read()
        if not ret:
            print("Failed to read frame from camera. Exiting...")
            break
            
        # Run YOLO tracking on the frame
        results = yolo.track(frame, stream=True, persist=True, verbose=False)
        is_authorized_person_detected = False

        # Process the results
        for result in results:
            for box in result.boxes:
                # Check for detections with confidence > 40%
                if box.conf[0] > 0.4:
                    # Get bounding box coordinates and class info
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    cls = int(box.cls[0])
                    class_name = result.names[cls]
                    
                    # Set bounding box color based on authorization status
                    color = (0, 255, 0) # Default to RED for "Unauthorized"
                    
                    if cls == authorized_class_id:
                        is_authorized_person_detected = True
                        color = (0, 0, 255) # Set to GREEN for "Authorized"
                    
                    # Draw the bounding box
                    cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                    
                    # Create and draw the label
                    label = f'{class_name} {box.conf[0]:.2f}'
                    cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
        
        # --- Communicate with Arduino based on detection results ---
        new_status = "authorized" if is_authorized_person_detected else "unauthorized"
        
        # Only send a signal to the Arduino if the status has changed
        if new_status != current_status:
            current_status = new_status
            if arduino: # Check if arduino is connected
                if current_status == "unauthorized":
                    print("Status: UNAUTHORIZED! Sending 'U' for alarm ON.")
                    arduino.write(b'U') # Send 'U' for Unauthorized
                else: # authorized
                    print("Status: Authorized. Sending 'A' for alarm OFF.")
                    arduino.write(b'A') # Send 'A' for Authorized

        # Display the resulting frame
        cv2.imshow('Real-time Detection (Press Q to quit)', frame)

        # Break the loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("'q' key pressed. Shutting down...")
            break
finally:
    # --- 7. Release All Resources ---
    print("Releasing camera and closing all windows.")
    videoCap.release()
    cv2.destroyAllWindows()
    
    # Safely close the connection to the Arduino
    if arduino and arduino.is_open:
        print("Turning off buzzer and closing Arduino connection...")
        arduino.write(b'A') # Ensure the buzzer is off before exiting
        arduino.close()
